Отлично! Давайте разработаем систему купонов для товаров. Вот план:

Модель купона: Создадим модель Coupon для хранения информации о купонах (код, скидка, срок действия).
Форма купона: Создадим форму для ввода кода купона на странице корзины.
Представление для применения купона: Создадим представление, которое будет принимать код купона, проверять его валидность и применять скидку к корзине.
Обновление шаблона корзины: Обновим шаблон корзины, чтобы отображать форму купона и примененную скидку.
1. Создайте модель Coupon (coupons/models.py):

Сначала создадим новое приложение coupons:

bash

python manage.py startapp coupons
Затем создайте модель Coupon:

python

# coupons/models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone

class Coupon(models.Model):
    code = models.CharField(max_length=50, unique=True)
    valid_from = models.DateTimeField()
    valid_to = models.DateTimeField()
    discount = models.IntegerField(
        validators=[MinValueValidator(0), MaxValueValidator(100)]
    )
    active = models.BooleanField(default=True)

    def __str__(self):
        return self.code

    def is_valid(self):
        now = timezone.now()
        return self.active and self.valid_from <= now <= self.valid_to
Пояснения:

code: Код купона (например, “SUMMER20”). unique=True гарантирует, что каждый код будет уникальным.
valid_from: Дата и время, начиная с которых купон действителен.
valid_to: Дата и время, до которых купон действителен.
discount: Скидка в процентах (например, 20 для 20%). Используем валидаторы, чтобы убедиться, что скидка находится в диапазоне от 0 до 100.
active: Указывает, активен ли купон.
Выполните миграции:

bash

python manage.py makemigrations coupons
python manage.py migrate coupons
2. Создайте форму купона (coupons/forms.py):

python

# coupons/forms.py
from django import forms

class CouponApplyForm(forms.Form):
    code = forms.CharField(label='Купон')
Эта форма просто содержит поле для ввода кода купона.

3. Создайте представление для применения купона (coupons/views.py):

python

# coupons/views.py
from django.shortcuts import render, redirect
from django.utils import timezone
from django.views.decorators.http import require_POST
from .models import Coupon
from .forms import CouponApplyForm
from cart.cart import Cart  # Импортируйте Cart

@require_POST
def coupon_apply(request):
    now = timezone.now()
    form = CouponApplyForm(request.POST)
    if form.is_valid():
        code = form.cleaned_data['code']
        try:
            coupon = Coupon.objects.get(code__iexact=code,
                                         valid_from__lte=now,
                                         valid_to__gte=now,
                                         active=True)
            request.session['coupon_id'] = coupon.id
        except Coupon.DoesNotExist:
            request.session['coupon_id'] = None
            messages.error(request, "Недействительный купон")
    return redirect('cart:cart_detail') #Измените 'cart_detail' на фактический URL-адрес вашей корзины
Пояснения:

@require_POST: Ограничиваем представление только POST-запросами.
Получаем код купона из формы.
Пытаемся получить купон из базы данных, используя code__iexact для нечувствительного к регистру сравнения. Также проверяем, что купон действителен в данный момент времени и активен.
Если купон найден, сохраняем его ID в сессии.
Если купон не найден, удаляем coupon_id из сессии.
Перенаправляем на страницу корзины.
4. Создайте URL-адрес для применения купона (coupons/urls.py):

python

# coupons/urls.py
from django.urls import path
from . import views

app_name = 'coupons'

urlpatterns = [
    path('apply/', views.coupon_apply, name='apply'),
]
Включите coupons.urls в главный urls.py (inked_piersing_studio/urls.py):

python

from django.urls import path, include

urlpatterns = [
    # ... другие URL-адреса
    path('coupons/', include('coupons.urls', namespace='coupons')),
]
5. Обновите шаблон корзины (cart/templates/cart/detail.html или аналогичный):

Предполагая, что у вас есть шаблон корзины, который отображает содержимое корзины, обновите его, чтобы включить форму купона и отображать примененную скидку.

html

<!-- cart/templates/cart/detail.html -->
{% extends "base.html" %}

{% block content %}
    <h1>Корзина</h1>

    <table class="table">
        <thead>
            <tr>
                <th>Изображение</th>
                <th>Товар</th>
                <th>Количество</th>
                <th>Цена</th>
                <th>Сумма</th>
            </tr>
        </thead>
        <tbody>
            {% for item in cart %}
                <tr>
                    <td>
                        <a href="{{ item.product.get_absolute_url }}">
                            <img src=""img/no_image.png" %}{% endif %}" style="width: 50px;">
                        </a>
                    </td>
                    <td>{{ item.product.name }}</td>
                    <td>
                        <form action="{% url "cart:cart_update" item.product.id %}" method="post">
                            {% csrf_token %}
                            {{ item.quantity_form.quantity }}
                            {{ item.quantity_form.update }}
                            <input type="submit" value="Обновить">
                        </form>
                    </td>
                    <td>{{ item.price }}</td>
                    <td>{{ item.total_price }}</td>
                </tr>
            {% endfor %}
            <tr>
                <td colspan="4">Итого:</td>
                <td>{{ cart.get_total_price }}</td>
            </tr>
            {% if cart.coupon %}
                <tr>
                    <td colspan="4">Купон "{{ cart.coupon.code }}" (-{{ cart.coupon.discount }}%):</td>
                    <td>- {{ cart.get_discount|floatformat:"2" }}</td>
                </tr>
                <tr>
                    <td colspan="4">Итого со скидкой:</td>
                    <td>{{ cart.get_total_price_after_discount|floatformat:"2" }}</td>
                </tr>
            {% endif %}
        </tbody>
    </table>

    <div class="coupon">
        <form action="{% url "coupons:apply" %}" method="post">
            {% csrf_token %}
            {{ coupon_apply_form }}
            <input type="submit" value="Применить купон">
        </form>
    </div>
    <p>
        <a href="{% url "products:product_list" %}" class="button">Продолжить покупки</a>
        <a href="{% url "orders:order_create" %}" class="button">Оформить заказ</a>
    </p>

{% endblock %}
6. Обновите Cart (cart/cart.py):

Добавьте логику для работы с купонами в ваш класс Cart. Необходимо добавить методы для получения купона, расчета скидки и общей стоимости после скидки.

python

# cart/cart.py
from decimal import Decimal
from django.conf import settings
from products.models import Product
from coupons.models import Coupon  # Import the Coupon model

class Cart(object):
    def __init__(self, request):
        """
        Initialize the cart.
        """
        self.session = request.session
        cart = self.session.get(settings.CART_SESSION_ID)
        if not cart:
            # save an empty cart in the session
            cart = self.session[settings.CART_SESSION_ID] = {}
        self.cart = cart
        self.coupon_id = self.session.get('coupon_id')

    def add(self, product, quantity=1, update_quantity=False):
        """
        Add a product to the cart or update its quantity.
        """
        product_id = str(product.id)
        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0,
                                      'price': str(product.price)}
        if update_quantity:
            self.cart[product_id]['quantity'] = quantity
        else:
            self.cart[product_id]['quantity'] += quantity

        self.save()

    def save(self):
        # update the session cart
        self.session[settings.CART_SESSION_ID] = self.cart
        # mark the session as "modified" to be sure it is saved
        self.session.modified = True

    def remove(self, product):
        """
        Remove a product from the cart.
        """
        product_id = str(product.id)
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()

    def __iter__(self):
        """
        Iterate over the items in the cart and retrieve products from the database.
        """
        product_ids = self.cart.keys()
        # get the product objects and add them to the cart
        products = Product.objects.filter(id__in=product_ids)
        for product in products:
            self.cart[str(product.id)]['product'] = product

        for item in self.cart.values():
            item['price'] = Decimal(item['price'])
            item['total_price'] = item['price'] * item['quantity']
            yield item

    def __len__(self):
        """
        Count all items in the cart.
        """
        return sum(item['quantity'] for item in self.cart.values())

    def get_total_price(self):
        """
        Calculate the total cost in the cart.
        """
        return sum(Decimal(item['price']) * item['quantity'] for item in self.cart.values())

    def clear(self):
        # remove cart from session
        del self.session[settings.CART_SESSION_ID]
        self.session.modified = True

    @property
    def coupon(self):
        if self.coupon_id:
            try:
                return Coupon.objects.get(id=self.coupon_id)
            except Coupon.DoesNotExist:
                return None
        return None

    def get_discount(self):
        if self.coupon:
            return (self.coupon.discount / Decimal(100)) * self.get_total_price()
        return Decimal(0)

    def get_total_price_after_discount(self):
        return self.get_total_price() - self.get_discount()
Что было добавлено/изменено:

Импортирована модель Coupon из приложения coupons.
Добавлен атрибут coupon_id для хранения ID купона из сессии.
Добавлено свойство @property coupon, которое пытается получить купон по coupon_id из базы данных. Если купон не найден, возвращает None.
Добавлен метод get_discount(), который рассчитывает сумму скидки на основе купона (если он есть) и общей стоимости корзины.
Добавлен метод get_total_price_after_discount(), который рассчитывает общую стоимость корзины после применения скидки.
7. Обновите представление cart_detail (cart/views.py)

python

#cart/views.py
from django.shortcuts import render, redirect
from django.views.decorators.http import require_POST
from .cart import Cart
from .forms import CartAddProductForm
from coupons.forms import CouponApplyForm


def cart_detail(request):
    cart = Cart(request)
    for item in cart:
        item['update_quantity_form'] = CartAddProductForm(initial={'quantity': item['quantity'], 'update': True})
    coupon_apply_form = CouponApplyForm()
    return render(request, 'cart/detail.html', {'cart': cart, 'coupon_apply_form': coupon_apply_form})


@require_POST
def cart_add(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Product, id=product_id)
    form = CartAddProductForm(request.POST)
    if form.is_valid():
        cd = form.cleaned_data
        cart.add(product=product,
                 quantity=cd['quantity'],
                 update_quantity=cd['update'])
    return redirect('cart:cart_detail')


def cart_remove(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Product, id=product_id)
    cart.remove(product)
    return redirect('cart:cart_detail')
Пояснения:

Импортируйте CouponApplyForm
Создайте экземпляр CouponApplyForm и передайте его в шаблон cart/detail.html
8. Админка (необязательно, но рекомендуется):

Чтобы управлять купонами, зарегистрируйте модель Coupon в админке (coupons/admin.py):

python

# coupons/admin.py
from django.contrib import admin
from .models import Coupon

@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    list_display = ['code', 'valid_from', 'valid_to', 'discount', 'active']
    list_filter = ['active', 'valid_from', 'valid_to']
    search_fields = ['code']
Теперь вы можете создавать и управлять купонами через админ-панель Django.

Как это работает:

Пользователь добавляет товары в корзину.
Пользователь переходит на страницу корзины.
Пользователь вводит код купона в форму и отправляет ее.
Представление coupon_apply проверяет код купона и, если он действителен, сохраняет ID купона в сессии.
При отображении корзины класс Cart получает ID купона из сессии и загружает купон из базы данных.
Класс Cart рассчитывает сумму скидки и общую стоимость корзины после скидки.
Шаблон корзины отображает форму купона, общую стоимость корзины, сумму скидки (если купон применен) и общую стоимость корзины после скидки.
Важные замечания:

Обработка ошибок: Этот код предоставляет базовую обработку ошибок. В реальном приложении вам может потребоваться добавить более подробную обработку ошибок, например, отображение сообщений об ошибках для пользователя, если купон недействителен или истек.
Безопасность: Убедитесь, что вы правильно обрабатываете данные, введенные пользователем, чтобы избежать атак, таких как SQL-инъекции.
Тестирование: Тщательно протестируйте систему купонов, чтобы убедиться, что она работает правильно во всех случаях.
Валидация: Убедитесь, что вы проводите валидацию на стороне сервера для всех данных, отправленных пользователем. Никогда не полагайтесь только на валидацию на стороне клиента, так как ее можно обойти.
Уникальные коды: В реальном приложении вы можете захотеть генерировать уникальные коды купонов, чтобы избежать их угадывания.
Ограничения: Вы можете добавить дополнительные ограничения на купоны, например, минимальную сумму заказа, определенные товары или категории товаров, или ограничение на количество использований.
Этот код предоставляет полную систему купонов для вашего интернет-магазина. Вы можете настроить и расширить ее в соответствии с вашими потребностями.